name: Deploy to DigitalOcean Droplet

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Build the project
        run: |
          yarn run build:common
          yarn run build:service

      - name: Create SSH private key file
        run: |
          echo "${{ secrets.DROPLET_SSH_KEY }}" > /tmp/droplet_key
          sed -i 's/\\n/\n/g' /tmp/droplet_key
          chmod 600 /tmp/droplet_key

      - name: Test SSH connection and Copy files via SSH
        run: |
          ssh -i /tmp/droplet_key -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }} 'echo "SSH connection successful!"'
          scp -i /tmp/droplet_key -o StrictHostKeyChecking=no -r apps/service/dist/* ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }}:/service

      - name: Set up environment variables
        run: |
          echo "SERVICE_CORS_ORIGIN_PORTAL=${{ secrets.SERVICE_CORS_ORIGIN_PORTAL }}" >> $GITHUB_ENV
          echo "SERVICE_CORS_ORIGIN_APP=${{ secrets.SERVICE_CORS_ORIGIN_APP }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "DB_CONNECTION_URL=${{ secrets.DB_CONNECTION_URL }}" >> $GITHUB_ENV
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> $GITHUB_ENV
          echo "SENDGRID_REQUEST_ALARM_TEMPLATE_ID=${{ secrets.SENDGRID_REQUEST_ALARM_TEMPLATE_ID }}" >> $GITHUB_ENV
          echo "SENDGRID_REQUEST_AUTO_REPLY_TEMPLATE_ID=${{ secrets.SENDGRID_REQUEST_AUTO_REPLY_TEMPLATE_ID }}" >> $GITHUB_ENV

      - name: Install Dependencies on Droplet
        run: |
          ssh -i /tmp/droplet_key -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }} '
            cd /service &&
            yarn install
          '

      - name: Verify PM2 Path and Service Directory
        run: |
          ssh -i /tmp/droplet_key -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }} '
            export PATH=$PATH:/root/.nvm/versions/node/v20.18.3/bin &&
            echo "Verifying PM2 Path..."
            /root/.nvm/versions/node/v20.18.3/bin/pm2 -v
            echo "Checking service directory..."
            ls -la /service
          '

      - name: Restart PM2 and Start Server
        run: |
          ssh -i /tmp/droplet_key -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }} '
            export PATH=$PATH:/root/.nvm/versions/node/v20.18.3/bin &&
            /root/.nvm/versions/node/v20.18.3/bin/pm2 stop sam_service_app || true &&
            /root/.nvm/versions/node/v20.18.3/bin/pm2 start /service/server.js --name sam_service_app &&
            echo "Server started successfully!"
          '
